---
layout: post
title:  "Lean4AI: An Overview"
date:   2025-01-30 07:30:00 +0000
categories: AI
---

The other day, I was chatting with a friend and trying to explain my research program. The question arises: How should someone new learn about this topic?

My default answer had been to start with the original [proposal](https://gasstationmanager.github.io/ai/2024/11/04/a-proposal.html), and then to read the follow up posts on this blog and to play with the GitHub repos linked from them. The drawback is that with six blog posts so far and about the same number of github repos, it would a very long read.

Thinking about this more, I believe 
a reading guide that lays out the various components in a more structured and logical sequence can be valuable. 
Hence this post. Readers may use the reading guide to focus their attention on a particular branch of inquiry that they find more interesting. Or, you may still want to read everything,
but with the overall structure in mind, you can hopefully get a better sense of how they fit together.

Also, does our project need a catchy title? I've been thinking about the title  **Lean4AI**.
This is a play on related project titles like "AI for Lean", "AI for Math" etc.
Sub-slogan:
*Using iteractive theorem provers like Lean to tackle the great challenges of generative AI: Safety and Hallucination.*
Comments and suggestions are welcome. Meanwhile, I got the domain name [lean4ai.org](http://lean4ai.org), which currently points to this blog site.

## The Lean4AI Reading Guide

1. Read the original [proposal](https://gasstationmanager.github.io/ai/2024/11/04/a-proposal.html), Sections 1 and 2, and Section 3 up to the beginning of the Projects. This will give you a good sense of the  motivation of the project, and the overall direction.
2. Skim through the rest of the proposal including the Projects, to get a rough sense of what they are. If you find one or more of the projects particularly exciting, feel free to read those in more detail, and refer to the relevant materials in the next bullet. 
3. The subsequent material can be divided into three streams:
    - **Dataset creation and sharing.** Current efforts are happening in the following sub-projects:
        - **Code with Proof: the Arena.** This is a website where coding challenges with formal specifications can be posted and solved.  Relevant reading: [Progress report 1](https://gasstationmanager.github.io/ai/2024/11/19/progress1.html). Code on GitHub: [Arena](https://github.com/GasStationManager/CodeProofTheArena), [SafeVerify](https://github.com/GasStationManager/SafeVerify).
        A [demo](http://www.codeproofarena.com:8000/) of the website is up.
        - **Code with Proof Benchmark.** This is a human-written (by me) suite of code-with-proof problems and solutions. Code on GitHub: [Benchmark](https://github.com/GasStationManager/CodeProofBenchmark). Also available on [HuggingFace](https://huggingface.co/datasets/GasStationManager/CodeProofBenchmark).
        Try these problems on the [Arena demo site](http://www.codeproofarena.com:8000/).
        - **FormalizeWithTest.** Autoformalization of coding problems, verified with test cases. Relevant reading: [Progress Report 2](https://gasstationmanager.github.io/ai/2024/11/29/progress2.html). Code on GitHub: [FormalizeWithTest](https://github.com/GasStationManager/FormalizeWithTest), [LeanTool](https://github.com/GasStationManager/LeanTool).
        Some of the results of the autoformalization are on [Arena demo](http://www.codeproofarena.com:8000/).
    - **Hallucination Detecting and Recovery.** We use Lean to help LLMs
    detect and recover from hallucinations. Reading: [Progress report 3](https://gasstationmanager.github.io/ai/2025/01/22/hallucination.html), [3.5](https://gasstationmanager.github.io/ai/2025/02/05/hallucination-followup.html). Code on GitHub: [WakingUp](https://github.com/GasStationManager/WakingUp) is the main repo; dataset preprocessing provided by [FormalizeWithTest](https://github.com/GasStationManager/FormalizeWithTest); also uses [LeanTool](https://github.com/GasStationManager/LeanTool) for LLM-Lean interaction.
    - **Programming with dependent types.** A promising approach for producing verified code, and for easily locating errors while generating code. Reading: [Memoization example](https://gasstationmanager.github.io/ai/2024/12/03/memoization1.html), [DP example](https://gasstationmanager.github.io/ai/2024/12/09/dp2.html), and [some discussion of future directions relating to hallucination detection](https://gasstationmanager.github.io/ai/2025/01/22/hallucination.html). Code on GitHub: Some of the solutions in [Benchmark](https://github.com/GasStationManager/CodeProofBenchmark) are written in this style. Practice on [Arena demo](http://www.codeproofarena.com:8000/).


## Diagram of Data Creation Processes

(**Added 2/5**) Here is a rough drawing of how our various projects relate to each other in  terms of data creation.
![Data creation processes](/images/data_overview.jpg)

## Contribubting

If you are interested in contributing or collaborating, feel free to contact me at
GasStationCodeManager@gmail.com. If you are looking for research project ideas, check out the future work discussions in the various posts mentioned above. If you are looking for code contribution ideas, check out some of the open issues in my [GitHub projects](https://github.com/GasStationManager/). 
